app.get('/',(요청,응답) => { // 페이지 접속시 / 은 메인 , /abcd - abcd로 접속시
    // 응답.send('메인입니다.') // 단순 글씨만 보낼떄
    // 응답.sendFile(__dirname + '/파일명.html') // html파일을 보낼때
  })


db.collection('post').insertOne({ 이름 : 값 }) // db에 데이터 단일로 삽입하는법

let result = await db.collection('post').find().toArray() // db에서 모든데이터 가져오기 await이 필수라 위에 함수에 async또한 필수
db.collection('post').find().toArray().then(()=>{}) // awiat 쓰기 싫다면 then으로 활용가능

let result = await db.collection('post').find().limit(5).toArray() db - post 데이터 중에서 5개만 가져오기 limit

result = await db.collection('post').find().skip(5).limit(5).toArray() // 앞에 5개는 제외하고 5개를뽑아오는 코드 - pagenation 할때 유용할듯함. .skip() 은 성능이 안좋다 너무 많은 갯수는 ㄴㄴ

// 스킵을 안쓰고 방금게시물에서 다음페이지 바로가기 같은 기능은...
/* app.get('/list/:id', async (요청,응답) => {
  let result = await db.collection('post').find({_id : {$gt : new ObjectId(요청.params.id)}}).limit(5).toArray()
  응답.render('검색페이지.ejs',{ result : result})
}) */
// 이렇게 가능할듯하다. $gt는 _id가 방금본마지막게시물보다 큰거를 다 찾아옴  <- 여기서 5개제한을 걸어가져오는것 
// - 왜? - skip은 성능이 안좋으니까 다른방법으로 이게있단거(장점 :  빠름 - 아이디로 찾는게 되게빠르다고함, 단점 : 페이지이동은 불가능 - 이전, 다음 이런 화살표기능만 가능) 

console.log(요청.body) // 유저가 보낸 데이터